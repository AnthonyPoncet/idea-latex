{
  parserClass               = "mobi.hsz.idea.latex.parser.LatexParser"
  parserUtilClass           = "mobi.hsz.idea.latex.parser.LatexParserUtil"

  extends                   = "mobi.hsz.idea.latex.psi.LatexElementImpl"

  psiClassPrefix            = "Latex"
  psiImplClassSuffix        = "Impl"
  psiPackage                = "mobi.hsz.idea.latex.psi"
  psiImplPackage            = "mobi.hsz.idea.latex.psi.impl"

  elementTypeHolderClass    = "mobi.hsz.idea.latex.psi.LatexTypes"
  elementTypeClass          = "mobi.hsz.idea.latex.psi.LatexElementType"
  tokenTypeClass            = "mobi.hsz.idea.latex.psi.LatexTokenType"

  tokens = [
    LBRACE                  = "{"
    RBRACE                  = "}"
    LBRACKET                = "["
    RBRACKET                = "]"
    LPAREN                  = "("
    RPAREN                  = ")"
    COMMA                   = ","
    COLON                   = ":"
    ASTERISK                = "*"
    LINE_BREAK              = '\\'

    IDENTIFIER_BEGIN        = '\begin'
    IDENTIFIER_END          = '\end'
    IDENTIFIER              = "regexp:\\\p{Alpha}+"

    ARGUMENT                = "regexp:\b([^\[\]\{\}\(\),\\])+\b"
    COMMENT                 = "regexp:%.*"

    SPECIAL                 = "regexp:[\S]|\\."
    CRLF                    = "regexp:[\s\r\n]+"
  ]

  extends("instruction.*")  = instruction
  name("instruction.*")     = instruction
  mixin("instruction.*")    = "mobi.hsz.idea.latex.psi.impl.LatexInstructionExtImpl"
  mixin("section")          = "mobi.hsz.idea.latex.psi.impl.LatexSectionExtImpl"
}


latexFile                       ::= item_ *
private item_                   ::= !<<eof>> expr * { pin = 1 }
private expr                    ::= section
                                  | instruction
                                  | argument_group
                                  | text
                                  | SPECIAL
                                  | CRLF
                                  | LINE_BREAK

section                         ::= instruction_begin expr * instruction_end { pin = 1 }

instruction_begin               ::= IDENTIFIER_BEGIN instruction_extra { pin = 1 }
instruction_end                 ::= IDENTIFIER_END   instruction_extra { pin = 1 }
instruction                     ::= IDENTIFIER       instruction_extra { pin = 1 }

text                            ::= ( ARGUMENT special_expr ? ) +


private instruction_extra       ::= ASTERISK ? argument_group *
private argument_group          ::= expr_list_bracket | expr_list_brace | expr_list_paren
private argument_expr           ::= ( special_expr * ( ARGUMENT | section | instruction ) special_expr * ) * { pin(".*") = 2 }
private special_expr            ::= SPECIAL | COLON | COMMA | LINE_BREAK | CRLF

private meta expr_list_bracket  ::= LBRACKET <<sequence argument_expr special_expr>> ? RBRACKET { pin(".*") = 1 }
private meta expr_list_brace    ::= LBRACE   <<sequence argument_expr special_expr>> ? RBRACE   { pin(".*") = 1 }
private meta expr_list_paren    ::= LPAREN   <<sequence argument_expr special_expr>> ? RPAREN   { pin(".*") = 1 }
private meta sequence           ::= <<p>> (<<q>> <<p>>) * { pin(".*") = 1 }
